AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Sample SAM Template for sam-test
Globals:
  Function:
    Runtime: nodejs12.x
    Environment:
      Variables:
        TABLE_NAME: !Ref Table
        ACCOUNT_ID: "082889196624"
    Timeout: 300
    MemorySize: 128

Resources:
  Table:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "id"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST
  GetCounter:
    Type: AWS::Serverless::Function 
    Properties:
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref Table
      Handler: src/counter/index.getLambda
      Runtime: nodejs12.x
      Events:
        GetHandler:
          Type: Api
          Properties:
            Path: /counter
            Method: get
  PutCounter:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Handler: src/counter/index.putLambda
      Events:
        GetTest:
          Type: Api
          Properties:
            Path: /counter
            Method: put
  DeleteCounter:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref Table
      Handler: src/counter/index.deleteLambda
      Events:
        DeleteTest:
          Type: Api
          Properties:
            Path: /counter
            Method: delete
  # GetSqsFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: src/sqs/index.getLambda
  #     Events:
  #       MySQSEvent:
  #         Type: SQS
  #         Properties:
  #           Queue: !GetAtt GlobalSQS.Arn
  #           BatchSize: 10
  PutSqsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Policies:
        - SQSSendMessagePolicy:
            QueueName: GlobalSQS
      Handler: src/sqs/index.putLambda
      Events:
        DeleteTest:
          Type: Api
          Properties:
            Path: /sqs
            Method: put
  AlarmTopic:
    Type: AWS::SNS::Topic
    Properties:
      Subscription:
      - Protocol: email
        Endpoint: 'onluza@gmail.com'
  GetCounterAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref GetCounter
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: '1'
  DeleteCounterAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmActions:
        - !Ref AlarmTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref DeleteCounter
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: '1'
  GlobalSQS: 
    Type: AWS::SQS::Queue
    Properties:
      QueueName: 'GlobalSQS'
  # myQueuePolicy:
  #   Type: AWS::SQS::QueuePolicy
  #   Properties:
  #     Queues:
  #       - !Ref GlobalSQS
  #     PolicyDocument:
  #       Statement:
  #         Effect: Allow
  #         Principal: "*"
  #         Action: "sqs:*"
  #         Resource: "*"